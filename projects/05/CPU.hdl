// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and 
 * execute instructions written in the Hack machine language.
 * In particular, the ALU executes the inputted instruction according
 * to the Hack machine language specification, as follows. 
 * The D and A in the language specification refer to CPU-resident registers,
 * while M refers to the memory register addressed by A, i.e. to Memory[A].
 * The inM input holds the value of this register. If the current instruction 
 * needs to write a value to M, the value is placed in outM, the address 
 * of the target register is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM=0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time unit. If reset == 1, then the 
 * CPU jumps to address 0 (i.e. sets pc = 0 in next time unit) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current program
                         // (reset == 1) or continue executing the current
                         // program (reset == 0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // RAM address (of M)
        pc[15];          // ROM address (of next instruction)

     PARTS:
	//decode
	And(a=instruction[15], b=instruction[5], out=d1);
	And(a=instruction[15], b=instruction[4], out=d2);
	And(a=instruction[15], b=instruction[3], out=d3);
	And(a=instruction[15], b=instruction[2], out=inst2);
	And(a=instruction[15], b=instruction[1], out=inst1);
	And(a=instruction[15], b=instruction[0], out=inst0);
	Not(in=instruction[15], out=noti);
	Or(a=noti, b=d1, out=ldA);
	Mux16(a=instruction, b=ALUout, sel=d1, out=inA);
	
	ARegister(in=inA, load=ldA, out=outA);
	Mux16(a=outA, b=inM, sel=instruction[12], out=yALU);
	And16(a=outA, b=outA, out[0..14]=addressM);
	DRegister(in=ALUout, load=d2, out=xALU);
	ALU(x=xALU, y=yALU,zx=instruction[11], nx=instruction[10],zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUout, out=outM, zr=zr, ng=ng);
	And(a=d3, b=d3, out=writeM);
	
	Not(in=ng, out=NotN);
	Not(in=zr, out=NotZ);
	And(a=NotN, b=NotZ, out=ps);

	And(a=ng, b=inst2, out=j1);
	And(a=zr, b=inst1, out=j2);
	And(a=ps, b=inst0, out=j3);

	Or(a=j1, b=j2, out=j1j2);
	Or(a=j3, b=j1j2, out=sel);
	PC(in=outA , load=sel, inc=true, reset=reset, out[0..14]=pc);
	 
    
}

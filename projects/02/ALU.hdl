// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU. Computes one of the following functions:
 * x+y, x-y, y–x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs.
 * Which function to compute is determined by 6 input bits 
 * denoted zx, nx, zy, ny, f, no.
 * The computed function's value is called "out".
 * In addition to computing out, the ALU computes two 
 * 1-bit outputs called zr and ng:
 * if out == 0, zr = 1; otherwise zr = 0;
 * If out < 0, ng = 1; otherwise ng = 0.
 * The 6-bit combinations (zx,nx,zy,ny,f,no) and 
 * their effect are documented in the book. 
 */

// Implementation: the ALU manipulates the x and y
// inputs and then operates on the resulting values, 
// as follows:
// if (zx  == 1) sets x = 0        // 16-bit constant
// if (nx  == 1) sets x = ~x       // bitwise "not"
// if (zy  == 1) sets y = 0        // 16-bit constant
// if (ny  == 1) sets y = ~y       // bitwise "not"
// if (f   == 1) sets out = x + y  // integer 2's-complement addition
// if (f   == 0) sets out = x & y  // bitwise And
// if (no  == 1) sets out = ~out   // bitwise Not
// if (out == 0) sets zr = 1
// if (out < 0)  sets ng = 1

  
CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute  out = x + y (if f == 1) or out = x & y (if == 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
	//zx----x
   	Not16(in=x, out=Notx);
        And16(a=x, b=Notx, out=xzero);
	Mux16(a=x, b=xzero, sel=zx, out=x1);
	//zy----y
	Not16(in=y, out=Noty);
        And16(a=y, b=Noty, out=yzero);
	Mux16(a=y, b=yzero, sel=zy, out=y1);
	//nx
	Not16(in=x1, out=x1not);
	Mux16(a=x1, b=x1not, sel=nx,out=x2);
	//ny
	Not16(in=y1, out=y1not);
	Mux16(a=y1, b=y1not, sel=ny, out=y2);

	//f
	Add16(a=x2, b=y2, out=x2Py2);
	And16(a=x2, b=y2, out=x2.y2);
	Mux16(a=x2.y2,b=x2Py2, sel=f, out=xy);
	
	//no
	Not16(in=xy, out=xynot);
	Mux16(a=xy,b=xynot,sel=no,out[0..7]=out1,out[8..15]=out2);
	And16(a[0..7]=out1,a[8..15]=out2,b[0..7]=out1, b[8..15]=out2, out[15]=nbit,out=out);
	//zr
	Or8Way(in=out1, out=outA);
	Or8Way(in=out2,out=outB);
	Or(a=outA, b=outB, out=notzr);
	Not(in=notzr, out=zr);

	//ng
	And(a=nbit,b=true, out=nout);
	Or(a=nout, b=nbit, out=ng);
        
}
